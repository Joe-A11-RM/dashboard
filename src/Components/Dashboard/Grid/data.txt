const staticData = [
		{
			id: 1,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "1",
				x: 0,
				y: 0,
				w: 3,
				h: 1,
				static: true,
			},
		},
		{
			id: 2,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "2",
				x: 3,
				y: 0,
				w: 3,
				h: 1,
			},
		},
		{
			id: 3,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "PieChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "3",
				x: 6,
				y: 0,
				w: 4,
				h: 2,
			},
		},
		{
			id: 4,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "4",
				x: 10,
				y: 0,
				w: 2,
				h: 1,
			},
		},
		{
			id: 5,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "5",
				x: 0,
				y: 1,
				w: 3,
				h: 1,
			},
		},
		{
			id: 6,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "6",
				x: 3,
				y: 1,
				w: 3,
				h: 1,
			},
		},
		{
			id: 7,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "7",
				x: 10,
				y: 1,
				w: 2,
				h: 1,
			},
		},
		{
			id: 8,
			chartData: {
				labels: [
					"January",
					"February",
					"March",
					"April",
					"May",
					"June",
					"July",
				],
				chartType: "LabelChart",
				data: Array.from({ length: 8 }, () => Math.floor(Math.random() * 100)),
				color: "#3B82F6",
				number: Math.floor(Math.random() * 100),
				title: "Growth Chart",
			},
			position: {
				i: "8",
				x: 10,
				y: 1,
				w: 2,
				h: 1,
			},
		},
	];





























		const generateLayouts = (themeData, columnCounts) => {
		const layouts = {};

		Object.entries(columnCounts).forEach(([breakpoint, cols]) => {
			let currentX = 0,
				currentY = 0,
				rowHeight = 0,
				itemsInRow = 0,
				rowLimit = 0; // Number of items per row before moving to next y

			if (themeData?.length > 0) {
				layouts[breakpoint] = themeData.map(
					({ i, x, y, w, h, component }, index) => {
						let newWidth;
						switch (breakpoint) {
							case "4k":
							case "2k":
								newWidth = 3;
								break;
							case "lg":
								newWidth = 4;
								break;
							case "md":
								newWidth = 5;
								break;
							case "sm":
								newWidth = 6;
								break;
							case "xs":
							case "xss":
								newWidth = 4;
								break;
							default:
								newWidth = Math.max(2, Math.floor((w / 12) * cols));
						}
						
						rowLimit = newWidth === 3 ? 4 : 3;

						if (index === 0) {
							currentX = ["md"].includes(breakpoint) ? 0 : x; // Take x from themeData
							currentY = 0;
							rowHeight = h;
						} else {
							if (currentX + newWidth > cols) {
								// Move to next row
								currentX = 0;
								currentY += rowHeight; // Increment Y correctly
								if (["md"].includes(breakpoint)) {
									itemsInRow = 0;
								}
							}
						}

						if (["4k", "2k"].includes(breakpoint)) {
							currentX = Math.floor(currentX / 3) * 3; // Force multiples of 3
						}

					
						if (itemsInRow >= rowLimit) {
							currentX = ["lg"].includes(breakpoint) ? x : 0;
							currentY = ["lg"].includes(breakpoint) ? y : +1;
							itemsInRow = 0;
						}

						let newPosition = {
							i,
							x: currentX,
							y: currentY,
							w: newWidth,
							h,
							component: (
								<Cards
									key={index}
									i={index}
									item={themeData[index]?.component?.props.item}
									removeWidget={removeWidget}
								/>
							),
						};

						currentX += newWidth;
						itemsInRow++;

						return newPosition;
					}
				);
			}
		});

		return layouts;
	};
	const columnCounts = {
		"4k": 12, // 4K screens
		"2k": 12, // 2K screens
		lg: 12, // Laptop
		md: 10, // Medium
		sm: 6, // Small
		xs: 4, // Extra small
		xxs: 2, // Tiny screens
	};